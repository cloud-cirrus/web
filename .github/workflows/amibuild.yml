name: Build AMI Test

env:
  AWS_REGION: us-east-2
on:
  push:
    branches: [master]

jobs:
  nodejs_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    name: Install node application and run unit tests
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2
      - name: 'Create .env file'
        run: |
          touch .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env
          echo DBUSER=${{ secrets.DBUSER }} >> .env
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env

      - name: Step 2 - Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Step 3 - Run Yarn build install and unit tests
        run: |
          yarn 
          yarn test

  packer_init_validate_build:
    needs: nodejs_tests
    runs-on: ubuntu-latest
    name: Build AWS Custom AMI with Node Application artifacts
    steps:
      - name: Step 1 - Checkout code from branch
        uses: actions/checkout@v2
      - name: 'Create .env file'
        run: |
          touch .env
          echo ENVIRONMENT=${{ secrets.ENVIRONMENT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env
          echo DBUSER=${{ secrets.DBUSER }} >> .env
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env
      - name: Step 2 - zip all the webapp files
        run: |
          zip -r webapp.zip ./
          pwd ./webapp
      - name: Step 3 - Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Step 4 - Packer Init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: ami.pkr.hcl

      - name: Step 5 - Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ami.pkr.hcl

      - name: Step 6 - Build Artifacts and create Custom AMI from Packer Build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: "-color=false -on-error=abort"
          target: ami.pkr.hcl
        env:
          PACKER_LOG: 1
